---
# Store monitoring rules on the monitoring server (so we can later merge them together and update Prometheus)
# This will be included in a loop to work around Ansible limitation:
# Ansible can't loop a block, but can loop an include. But include can't be delegated, so we include a (delegated) block.

# WARNING: Ansible docs mention that facts are normally set on calling server (the one before delegation started).
# We used delegate_facts: true here, but it didn't work: set_fact did create the fact,
# but it was invisible to the rest of the play, even to tasks delegated to the same host.
# Unintuitively, we have to set delegate_facts: false. This might interact badly when dynamic facts are used elsewhere.

- name: configure monitoring server
  delegate_to: "{{ mon_server }}"
  delegate_facts: false
  block:

  - name: ensure monitoring facts superdirectory exists
    file:
      path: "/etc/ansible"
      state: directory
      owner: root
      group: root
      mode: 0755 # wthout access for everyone, Ansible may throw exceptions at fact collection

  - name: ensure monitoring facts directory exists
    file:
      path: "{{ monitoring_fact_dir }}"
      state: directory
      owner: root
      group: root
      mode: 0750

  - name: get monitoring rules
    set_fact:
      _monitoring_ruleset: "{{ monitoring_ruleset | ruleset_to_prometheus(on_behalf=on_behalf, job_name=_autogenerated_job_name) }}"

  - name: store monitoring rules on monitoring server
    template:
      src: rules.in.j2
      dest: "{{ monitoring_fact_dir }}/{{ _monitoring_ruleset_name }}{{ monitoring_fact_suffix }}"
      owner: root
      group: root
      mode: 0440
      backup: true

  - name: gather facts of the monitoring machine # it might not be a part of current play
    ansible.builtin.setup:


#
# We would like to update monitoring config as the new services are installed so that operators can monitor the installation progress.
# Prometheus doesn't support multiple config files not includes (yet). Therefore, we have to be able to generate the complete config every time.
# We rely on a role from the Galaxy. This role uses tags to denote specific phases of its work (configure, install etc.), but Ansible can't import only tagged tasks.
# The Galaxy role also splits its tasks into multiple files, but there are some common tasks in main.yml. These are probably not necessary for config phase,
# but this is relying too much on internal working of the role: it would cause issues when galaxy roles are upgraded.
# We could render the config ourselves, but we do use non-trivial global, alerting etc. configs that are part of it: this would duplicate the code.
#
# Possible solutions:
#   - wait until Prometheus gets support for includes (https://github.com/prometheus/prometheus/issues/8543)
#   - implement (if even possibe) some kind of Ansible plugin that returns current tasks's tags and slap an "apply.when = 'configure' in tasks_tags" on the include
#
# Including our whole prometheus role is slow but definitely correct.
#
# NOTE: APT uses weird (and probably wrong) strategy when locking: it doesn't wait for locks, it immediately fails instead.
# As we include tasks that install packages, and delegate work of multiple servers to a single one, we will
# have (with overwhelming probability) competing locks. We work around this by limiting execution to 1 worker at a time.
- name: update prometheus config
  include_role:
    name: prometheus
    apply:
      delegate_to: "{{ mon_server }}" # include is a local taks; we have to delegate its subtasks
      delegate_facts: false
      throttle: 1
  vars:
    prometheus_skip_install: true # skip installation of Prometheus; it should be already installed.
    monitoring_bootstrap: false   # skip installation of Alertmanager, Blackbox exporter; it should be already installed.
    firewall_manage: false        # skip configuration of firewall for the included role, firewall is already managed
